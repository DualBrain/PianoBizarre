Imports System.ComponentModel.DataAnnotations

''' <summary>
''' A buffer provider utilizes an <see cref="Oscillator"/> to generate
''' a periodic signal based on various parameters
''' </summary>
Public MustInherit Class BufferProvider
    Implements IBufferProvider

    Private mOscillator As Oscillator = New Oscillator()
    Private mVolume As Double = 1.0
    Private mEnvelop As Envelope = New Envelope()
    Private mNote As New Note()
    Private mNoteShiftOffset As Integer = 0
    Private mPanning As Double = 0.0

    Protected Friend MustOverride Sub FillAudioBuffer(audioBuffer() As Integer, isFirst As Boolean) Implements IBufferProvider.FillAudioBuffer

    Public Sub New()
        AddHandler mEnvelop.EnvelopStepChanged, Sub()
                                                    If mEnvelop.EnvelopStep = Envelope.EnvelopeSteps.Idle Then
                                                        Frequency = 0
                                                    End If
                                                End Sub
    End Sub

    ''' <summary>
    ''' Use to gracefully dispose all used resources.
    ''' </summary>
    Public Overridable Sub Close() Implements IBufferProvider.Close
        mEnvelop.Dispose()
    End Sub

    Public Property NoteShiftOffset As Integer Implements IBufferProvider.NoteShiftOffset
        Get
            Return mNoteShiftOffset
        End Get
        Set(value As Integer)
            mNoteShiftOffset = value
        End Set
    End Property

    ''' <summary>
    ''' Gets the <see cref="Oscillator"/> attached to this buffer provider 
    ''' </summary>
    ''' <returns><see cref="Oscillator"/> </returns>
    Protected ReadOnly Property Oscillator As Oscillator Implements IBufferProvider.Oscillator
        Get
            Return mOscillator
        End Get
    End Property

    ''' <summary>
    ''' Gets or sets the attenuation applied to the signal generated by the attached <see cref="Oscillator"/> 
    ''' </summary>
    ''' <returns><see cref="Double"/> </returns>
    <RangeAttribute(0.0, 1.0)>
    Public Overridable Property Volume As Double Implements IBufferProvider.Volume
        Get
            Return mVolume
        End Get
        Set(value As Double)
            mVolume = Math.Min(1, Math.Max(0, value))
        End Set
    End Property

    ''' <summary>
    ''' Gets or sets the panning applied to the signal generated by the attached <see cref="Oscillator"/> 
    ''' A value of -1 is full left channel, 0 is center and +1 is full right
    ''' </summary>
    ''' <returns><see cref="Double"/> </returns>
    <RangeAttribute(-1.0, 1.0)>
    Public Overridable Property Panning As Double Implements IBufferProvider.Panning
        Get
            Return mPanning
        End Get
        Set(value As Double)
            mPanning = Math.Min(1, Math.Max(-1, value))
        End Set
    End Property

    Public Property Tag As Object Implements IBufferProvider.Tag

    ''' <summary>
    ''' Gets the <see cref="Envelop"/> curve that is applied to the <see cref="Oscillator"/>   
    ''' </summary>
    ''' <returns><see cref="Envelop"/> </returns>
    Public Overridable ReadOnly Property Envelop As Envelope Implements IBufferProvider.Envelop
        Get
            Return mEnvelop
        End Get
    End Property

    ''' <summary>
    ''' Gets or sets the frequency value at which the <see cref="Oscillator"/> vibrates. 
    ''' </summary>
    ''' <returns><see cref="Double"/> </returns>
    <RangeAttribute(0.0, Double.MaxValue)>
    Public Overridable Property Frequency As Double Implements IBufferProvider.Frequency
        Get
            Return mNote.Frequency
        End Get
        Set(value As Double)
            mNote.Frequency = value

            If mNote.Frequency = 0 Then
                If mEnvelop.EnvelopStep = Envelope.EnvelopeSteps.Idle Then
                    mOscillator.Frequency = mNote.Frequency
                Else
                    mEnvelop.Stop()
                End If
            Else
                mEnvelop.Start()
                mOscillator.Frequency = (mNote + mNoteShiftOffset).Frequency
            End If
        End Set
    End Property

    ''' <summary>
    ''' Gets or sets the musical note representation of the <see cref="Oscillator"/>'s <see cref="Frequency"/>.  
    ''' </summary>
    ''' <returns><see cref="IBufferProvider.Note"/></returns>
    Public Overridable Property Note As Note Implements IBufferProvider.Note
        Get
            Return Frequency
        End Get
        Set(value As Note)
            mNote = value
            Frequency = mNote.Frequency
        End Set
    End Property
End Class
